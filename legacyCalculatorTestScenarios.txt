Тестовый сценарий "Legacy Pricing Calculator Test" предназначен для задания требуемой конфигурации оборудования облачных вычислений старой версии (Legacy) сервиса Google Cloud, подсчёта месячной стоимости заданной конфигурации, проверки корректности и передаче рассчитанной стоимости письмом на имэйл. Исходный код тестового сценария описан в файле LegacyPricingCalculatorTest.java и состоит из следующей последовательности тест-кейсов:

	enterToLegacyCalculatorPage()
		- Открытие интернет-браузера и переход на веб-страницу старой версии калькулятора (Legacy) сервиса Google Cloud по адресу "https://cloud.google.com/products/calculator-legacy";
		- Проверка соответствия отрытой страницы требуемой. 
		- Проверка соответствия заголовка открытой веб-страницы требуемому "Google Cloud Pricing Calculator".
	
	1. chooseTheEquipment()
		- Выбор раздела "Compute Engine" в карусели;
		- Проверка корректности выбора раздела путём поиска наличия надписи "Instances" в заголовке формы выбора конфигурации;
		- Ввод значения количества экземпляров в поле "Number of Instances" - значение "4";
		- Выбор из выпадающего списка желаемой операционной системы в поле "Operating System / Software" - установка варианта "Free: Debian, CentOS, CoreOS, Ubuntu or BYOL (Bring Your Own License)";
		- В поле "Provisioning model" из выпадающего списка выбор "Regular";
		- В поле "Series" из выпадающего списка выбор "N1";
		- В поле "Machine type" из выпадающего списка выбор "n1-standard-8";
		- В поле "Boot disk size (GiB)" ввод значения "30";
		- Нажатие чекбокса "Add GPUs";
			- В появившемся поле "GPU type" из выпадающего списка выбор "NVIDIA TESLA P100";
			- В появившемся поле "Number of GPUs" из выпадающего списка выбор значения "1";
		- В поле "Local SSD" из выпадающего списка выбор "2X375 GB";
		- В поле "Datacenter location" из выпадающего списка выбор "Belgium (europe-west1)";
		- В поле "Committed usage" из выпадающего списка выбор "Belgium (europe-west1)";
		- Выбор из выпадающего списка в поле "Region*" варианта "1 year";
		- Нажатие на кнопку "ADD TO ESTIMATE" для подсчёта стоимости сконфигурированного оборудования.
		
		- В появившемся справа боковом меню "Estimate" выделение цветом рассчитанных общей ежемесячной стоимости "Total Estimated Cost" и цен комплектующих конфигурации Instance type, GPU dies, Local SSD, Boot disk.
	
	2. validationOfRequirements()
		- Вывод конфигурации оборудования на консоль.
		
		- Проверка соответствия выбранных комплектующих требуемым боковом меню "Estimate":
			- в поле "Provisioning model" значние "Regular";
			- в поле "Instance type" значение "n1-standard-8";
			- в поле "Region" значение "Belgium";
			- в поле "Local SSD" значение "2X375 GB";
			- в поле "Commitment term" значние "1 year".
	
	3. estimatePrice()
		- Проверка корректности расчёта общей стоимости сконфигурированного оборудования путём суммирования цен комплектующих конфигурации Instance type, GPU dies, Local SSD, Boot disk;
		
		- Вывод цен комплектующих конфигурации и общей стоимости на консоль;
		- Создание скриншота открытой веб-страницы.
		
	4. getEmailAddress()
		- Открытие новой вкладки в используемом интернет-браузере;
		- Переход на веб-страницу сервиса временных адресов электронной почты YOPmail по адресу "https://yopmail.com/";
		- Проверка наличия названия сервиса YOPmail в заголовке открытой веб-страницы;
		- Создание нового адреса электрнной почты путём нажатия на кнопку "Случаынй адрес электронной почты":
			- закрытие всплывшего попапа с рекламой;
			- копирование с буфер сгенерированного адреса электронной почты путём нажатия на кнопку "Скопировать в буфер обмена" ("Copy to clipboard").
			
	5. sendEmailAndValidatePrice()
		- Переход на вкладку с веб-страницей Google Cloud Pricing Calculator в используемом интернет-браузере;
		- Нажатие на иконку "Email Estimate" в нижней части бокового меню "Estimate";
			- в открывшемся попап окне "Email Your Estimate" в поле "Email*" ввод сгенерированного адреса электронной почты;
			- нажатие на кнопку "SEND EMAIL";
		- Переход на вкладку с веб-страницей YOPmail в используемом интернет-браузере;
		- Обновление открытой веб-страницы;
		- Нажатие на кнопку "Проверить почту";
		- Создание скриншота открытой веб-страницы;
		- Сравнение значения стоимости в пришедшем электронном письме с фактически рассчитанной в сервисе калькулятора;
		- Закрытие вкладки с открытой веб-страницей сервиса YOPmail.
		
		
		
Тестовый сценарий "Simple Filed Test" с включённым в него "упавшим" тестом в состав которого входит заранее предусмотренный сломанный тестовый метод (с выпадением исключения TimeoutException) предназначен для просмотра возможности вертикальной прокрутки открытой веб-страницы и отработки поведения "лиснера" во время неудачного завершения теста. Исходный код тестового сценария описан в файле SimpleFiledTest.java и состоит из следующей последовательности тест-кейсов:
	
	enterToPage()
		- Открытие интернет-браузера и переход на веб-страницу старой версии калькулятора (Legacy) сервиса Google Cloud по адресу "https://cloud.google.com/products/calculator-legacy";
		- Проверка соответствия заголовка открытой веб-страницы требуемому "Google Cloud Pricing Calculator".
		
	1. pageScrolling()
		- Проверка наличия заголовка "Solutions" в футере открытой страницы;
		- Выделение цветом веб-элемента заголовка "Solutions";
		- Вертикальная прокрутка веб-страницы в различные положения.
		
	2. failedTest()
		- Выбор раздела "Compute Engine" в карусели;
		- Проверка наличия кнопки "ESTIMATE" в форме выбора конфигурации оборудования;
		- Попытка нажатия на не активную кнопку "ESTIMATE";
		- Ожидание 3 секунды на проверку ожидания кликательности кнопки "ESTIMATE". По истечении указанного времени тест падает с исключением TimeoutException.
		
		
		
Оба тестовых сценария можно запускать как по отдельности, так и совместно из файла конфигурации тестов testngLegacyCalculatorSuite.xml.